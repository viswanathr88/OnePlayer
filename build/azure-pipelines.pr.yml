# Universal Windows Platform
# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

trigger: none

pr:
- master

name: 0.$(Date:yyMM).$(DayOfMonth)$(Rev:rr).0

pool:
  vmImage: 'windows-latest'

variables:
- group: 'riff-uwp-pipeline'
- name: 'solution'
  value: '**/*.sln'
- name: 'buildPlatform'
  value: 'x64'
- name: 'buildConfiguration'
  value: 'Debug'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: PowerShell@2
  displayName: 'Set version number in AppxManifest'
  inputs:
    filePath: $(Build.SourcesDirectory)\build\scripts\UpdateAppxManifestVersion.ps1
    arguments: '-AppxManifest $(Build.SourcesDirectory)\Riff.UWP\Package.appxmanifest -Version $(Build.BuildNumber)'

- task: DownloadSecureFile@1
  name: secureCert
  displayName: 'Get the signing cert for the UWP Unit Test app'
  inputs:
    secureFile: '$(unitTestCert.secureFilePath)'

- task: PowerShell@2
  displayName: 'Add the cert to the certificate store'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Start adding the PFX file to the certificate store."

      $pfxpath = '$(unitTestCert.secureFilePath)'
      $password = '$(unitTestCert.password)'
      
      Add-Type -AssemblyName System.Security
      $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
      $cert.Import($pfxpath, $password, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"PersistKeySet")
      $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
      $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
      $store.Add($cert)
      $store.Close()

- task: VSBuild@1
  displayName: Build solution
  inputs:
    solution: '$(solution)'
    vsVersion: latest
    msbuildArgs: /p:OutDir=$(Build.BinariesDirectory)\$(buildConfiguration)\$(buildPlatform)\ /p:GenerateProjectSpecificOutputFolder=true /p:AppVersion=$(Build.BuildNumber) /t:Publish /p:PublishDir=$(Build.BinariesDirectory)\$(buildConfiguration)\$(buildPlatform)\publish\ /p:AppxPackageSigningEnabled=false /p:AppxBundle=Never
    platform: $(buildPlatform)
    configuration: $(buildConfiguration)
    clean: true
    maximumCpuCount: true

- task: PublishBuildArtifacts@1
  displayName: Publish drop artifact
  inputs:
    artifactName: drop
    pathToPublish: $(Build.BinariesDirectory)
    parallel: true